/*
* This header is generated by classdump-dyld 0.7
* on Friday, November 28, 2014 at 4:16:25 PM Central European Standard Time
* Operating System: Version 7.1.2 (Build 11D257)
* Image Source: /private/var/mobile/Downloads/AutoTouch
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013 by Elias Limneos.
*/


#import <AutoTouch/AutoTouch-Structs.h>
@class NSMutableArray, AsyncReadPacket, NSTimer, NSMutableData, AsyncWritePacket;

@interface AsyncSocket : NSObject {

	CFSocketRef theSocket;
	CFSocketRef theSocket6;
	CFReadStreamRef theReadStream;
	CFWriteStreamRef theWriteStream;
	CFRunLoopSourceRef theSource;
	CFRunLoopSourceRef theSource6;
	CFRunLoopRef theRunLoop;
	SCD_Struct_As6* theContext;
	NSMutableArray* theReadQueue;
	AsyncReadPacket* theCurrentRead;
	NSTimer* theReadTimer;
	NSMutableData* partialReadBuffer;
	NSMutableArray* theWriteQueue;
	AsyncWritePacket* theCurrentWrite;
	NSTimer* theWriteTimer;
	id theDelegate;
	unsigned char theFlags;
	long theUserData;

}
+(id)CRLFData;
+(id)CRData;
+(id)LFData;
+(id)ZeroData;
-(id)initWithDelegate:(id)arg1 userData:(long)arg2 ;
-(char)acceptOnAddress:(id)arg1 port:(unsigned short)arg2 error:(id*)arg3 ;
-(CFSocketRef)createAcceptSocketForAddress:(id)arg1 error:(id*)arg2 ;
-(char)attachSocketsToRunLoop:(id)arg1 error:(id*)arg2 ;
-(unsigned short)localPort:(CFSocketRef)arg1 ;
-(id)getSocketError;
-(char)createStreamsToHost:(id)arg1 onPort:(unsigned short)arg2 error:(id*)arg3 ;
-(char)attachStreamsToRunLoop:(id)arg1 error:(id*)arg2 ;
-(char)configureStreamsAndReturnError:(id*)arg1 ;
-(char)openStreamsAndReturnError:(id*)arg1 ;
-(char)createSocketForAddress:(id)arg1 error:(id*)arg2 ;
-(char)configureSocketAndReturnError:(id*)arg1 ;
-(char)connectSocketToAddress:(id)arg1 error:(id*)arg2 ;
-(id)getAbortError;
-(char)createStreamsFromNative:(int)arg1 error:(id*)arg2 ;
-(void)closeWithError:(id)arg1 ;
-(id)getStreamError;
-(char)areStreamsConnected;
-(char)setSocketFromStreamsAndReturnError:(id*)arg1 ;
-(id)connectedHost;
-(unsigned short)connectedPort;
-(void)maybeDequeueRead;
-(void)maybeDequeueWrite;
-(void)recoverUnreadData;
-(void)emptyQueues;
-(void)endCurrentRead;
-(void)endCurrentWrite;
-(void)maybeScheduleDisconnect;
-(id)errorFromCFStreamError:(SCD_Struct_As7)arg1 ;
-(char)isSocketConnected;
-(id)connectedHost:(CFSocketRef)arg1 ;
-(unsigned short)connectedPort:(CFSocketRef)arg1 ;
-(id)localHost:(CFSocketRef)arg1 ;
-(id)addressHost:(CFDataRef)arg1 ;
-(unsigned short)addressPort:(CFDataRef)arg1 ;
-(void)scheduleDequeueRead;
-(void)readDataToData:(id)arg1 withTimeout:(double)arg2 maxLength:(long)arg3 tag:(long)arg4 ;
-(void)doReadTimeout:(id)arg1 ;
-(void)doBytesAvailable;
-(void)completeCurrentRead;
-(id)getReadMaxedOutError;
-(id)getReadTimeoutError;
-(void)scheduleDequeueWrite;
-(void)doWriteTimeout:(id)arg1 ;
-(void)doSendBytes;
-(void)completeCurrentWrite;
-(id)getWriteTimeoutError;
-(void)doSocketOpen:(CFSocketRef)arg1 withCFSocketError:(long)arg2 ;
-(void)doAcceptWithSocket:(int)arg1 ;
-(void)doStreamOpen;
-(char)canSafelySetDelegate;
-(CFSocketRef)getCFSocket;
-(CFReadStreamRef)getCFReadStream;
-(CFWriteStreamRef)getCFWriteStream;
-(float)progressOfReadReturningTag:(long*)arg1 bytesDone:(int*)arg2 total:(int*)arg3 ;
-(float)progressOfWriteReturningTag:(long*)arg1 bytesDone:(int*)arg2 total:(int*)arg3 ;
-(char)acceptOnPort:(unsigned short)arg1 error:(id*)arg2 ;
-(char)connectToHost:(id)arg1 onPort:(unsigned short)arg2 error:(id*)arg3 ;
-(char)connectToAddress:(id)arg1 error:(id*)arg2 ;
-(void)disconnectAfterWriting;
-(id)unreadData;
-(id)getErrnoError;
-(id)localHost;
-(unsigned short)localPort;
-(char)isIPv4;
-(char)isIPv6;
-(void)readDataToLength:(long)arg1 withTimeout:(double)arg2 tag:(long)arg3 ;
-(void)readDataToData:(id)arg1 withTimeout:(double)arg2 tag:(long)arg3 ;
-(void)readDataWithTimeout:(double)arg1 tag:(long)arg2 ;
-(void)writeData:(id)arg1 withTimeout:(double)arg2 tag:(long)arg3 ;
-(void)doCFSocketCallback:(unsigned long)arg1 forSocket:(CFSocketRef)arg2 withAddress:(id)arg3 withData:(const void*)arg4 ;
-(void)doCFReadStreamCallback:(unsigned long)arg1 forStream:(CFReadStreamRef)arg2 ;
-(void)doCFWriteStreamCallback:(unsigned long)arg1 forStream:(CFWriteStreamRef)arg2 ;
-(char)isConnected;
-(void)dealloc;
-(void)setDelegate:(id)arg1 ;
-(id)init;
-(id)description;
-(id)delegate;
-(void)close;
-(long)userData;
-(void)setUserData:(long)arg1 ;
-(void)disconnect;
-(id)initWithDelegate:(id)arg1 ;
@end

