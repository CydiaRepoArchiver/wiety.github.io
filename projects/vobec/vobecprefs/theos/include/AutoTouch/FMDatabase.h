/*
* This header is generated by classdump-dyld 0.7
* on Friday, November 28, 2014 at 4:16:27 PM Central European Standard Time
* Operating System: Version 7.1.2 (Build 11D257)
* Image Source: /private/var/mobile/Downloads/AutoTouch
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013 by Elias Limneos.
*/


#import <AutoTouch/AutoTouch-Structs.h>
@class NSString, NSMutableDictionary, NSMutableSet, NSDateFormatter;

@interface FMDatabase : NSObject {

	sqlite3Ref _db;
	NSString* _databasePath;
	char _logsErrors;
	char _crashOnErrors;
	char _traceExecution;
	char _checkedOut;
	char _shouldCacheStatements;
	char _isExecutingStatement;
	char _inTransaction;
	double _maxBusyRetryTimeInterval;
	double _startBusyRetryTime;
	NSMutableDictionary* _cachedStatements;
	NSMutableSet* _openResultSets;
	NSMutableSet* _openFunctions;
	NSDateFormatter* _dateFormat;

}

@property (assign) char traceExecution;                                 //@synthesize traceExecution=_traceExecution - In the implementation block
@property (assign) char checkedOut;                                     //@synthesize checkedOut=_checkedOut - In the implementation block
@property (assign) char crashOnErrors;                                  //@synthesize crashOnErrors=_crashOnErrors - In the implementation block
@property (assign) char logsErrors;                                     //@synthesize logsErrors=_logsErrors - In the implementation block
@property (retain) NSMutableDictionary * cachedStatements;              //@synthesize cachedStatements=_cachedStatements - In the implementation block
+(id)databaseWithPath:(id)arg1 ;
+(id)FMDBUserVersion;
+(long)FMDBVersion;
+(id)sqliteLibVersion;
+(char)isSQLiteThreadSafe;
+(id)storeableDateFormat:(id)arg1 ;
-(const char*)sqlitePath;
-(void)setMaxBusyRetryTimeInterval:(double)arg1 ;
-(void)closeOpenResultSets;
-(char)rekeyWithData:(id)arg1 ;
-(char)setKeyWithData:(id)arg1 ;
-(int)lastErrorCode;
-(id)lastErrorMessage;
-(id)errorWithMessage:(id)arg1 ;
-(void)warnInUse;
-(char)hasDateFormatter;
-(id)executeQuery:(id)arg1 withArgumentsInArray:(id)arg2 orDictionary:(id)arg3 orVAList:(void*)arg4 ;
-(char)databaseExists;
-(id)cachedStatementForQuery:(id)arg1 ;
-(void)bindObject:(id)arg1 toColumn:(int)arg2 inStatement:(sqlite3_stmtRef)arg3 ;
-(void)setCachedStatement:(id)arg1 forQuery:(id)arg2 ;
-(void)extractSQL:(id)arg1 argumentsList:(void*)arg2 intoString:(id)arg3 arguments:(id)arg4 ;
-(id)executeQuery:(id)arg1 withArgumentsInArray:(id)arg2 ;
-(char)executeUpdate:(id)arg1 error:(id*)arg2 withArgumentsInArray:(id)arg3 orDictionary:(id)arg4 orVAList:(void*)arg5 ;
-(char)executeUpdate:(id)arg1 withArgumentsInArray:(id)arg2 ;
-(char)executeStatements:(id)arg1 withResultBlock:(/*^block*/id)arg2 ;
-(sqlite3Ref)sqliteHandle;
-(char)logsErrors;
-(char)startSavePointWithName:(id)arg1 error:(id*)arg2 ;
-(char)rollbackToSavePointWithName:(id)arg1 error:(id*)arg2 ;
-(char)releaseSavePointWithName:(id)arg1 error:(id*)arg2 ;
-(void)setCachedStatements:(NSMutableDictionary *)arg1 ;
-(char)openWithFlags:(int)arg1 ;
-(double)maxBusyRetryTimeInterval;
-(int)busyRetryTimeout;
-(void)setBusyRetryTimeout:(int)arg1 ;
-(char)hasOpenResultSets;
-(void)resultSetDidClose:(id)arg1 ;
-(char)rekey:(id)arg1 ;
-(char)goodConnection;
-(long long)lastInsertRowId;
-(id)executeQuery:(id)arg1 withParameterDictionary:(id)arg2 ;
-(id)executeQueryWithFormat:(id)arg1 ;
-(id)executeQuery:(id)arg1 withVAList:(void*)arg2 ;
-(char)executeUpdate:(id)arg1 withParameterDictionary:(id)arg2 ;
-(char)executeUpdate:(id)arg1 withVAList:(void*)arg2 ;
-(char)executeUpdateWithFormat:(id)arg1 ;
-(char)executeStatements:(id)arg1 ;
-(char)executeUpdate:(id)arg1 withErrorAndBindings:(id*)arg2 ;
-(char)update:(id)arg1 withErrorAndBindings:(id*)arg2 ;
-(char)beginDeferredTransaction;
-(char)inTransaction;
-(id)inSavePoint:(/*^block*/id)arg1 ;
-(void)setShouldCacheStatements:(char)arg1 ;
-(void)makeFunctionNamed:(id)arg1 maximumArguments:(int)arg2 withBlock:(/*^block*/id)arg3 ;
-(NSMutableDictionary *)cachedStatements;
-(void)setLogsErrors:(char)arg1 ;
-(char)crashOnErrors;
-(void)setCrashOnErrors:(char)arg1 ;
-(char)checkedOut;
-(void)setCheckedOut:(char)arg1 ;
-(char)traceExecution;
-(void)setTraceExecution:(char)arg1 ;
-(id)getTableSchema:(id)arg1 ;
-(char)columnExists:(id)arg1 inTableWithName:(id)arg2 ;
-(int)intForQuery:(id)arg1 ;
-(long)longForQuery:(id)arg1 ;
-(char)boolForQuery:(id)arg1 ;
-(double)doubleForQuery:(id)arg1 ;
-(id)dataForQuery:(id)arg1 ;
-(id)dateForQuery:(id)arg1 ;
-(id)getSchema;
-(char)columnExists:(id)arg1 columnName:(id)arg2 ;
-(char)validateSQL:(id)arg1 error:(id*)arg2 ;
-(char)beginTransaction;
-(void)clearCachedStatements;
-(void)dealloc;
-(id)init;
-(char)commit;
-(void)setDateFormat:(id)arg1 ;
-(id)stringFromDate:(id)arg1 ;
-(char)close;
-(char)setKey:(id)arg1 ;
-(id)initWithPath:(id)arg1 ;
-(id)dateFromString:(id)arg1 ;
-(id)stringForQuery:(id)arg1 ;
-(int)changes;
-(char)tableExists:(id)arg1 ;
-(id)executeQuery:(id)arg1 ;
-(char)executeUpdate:(id)arg1 ;
-(unsigned)userVersion;
-(void)setUserVersion:(unsigned)arg1 ;
-(char)shouldCacheStatements;
-(char)rollback;
-(id)databasePath;
-(char)hadError;
-(id)lastError;
-(void)finalize;
-(char)open;
@end

